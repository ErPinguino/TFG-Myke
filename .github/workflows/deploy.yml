name: CI/CD Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build & Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      # 1. Bajar el código
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Instalar el JAR local (Cubiomes)
      - name: Install local Cubiomes JAR
        run: |
          mvn install:install-file \
            -Dfile=tfg/libs/cubiomes-java-0.0.6.jar \
            -DgroupId=com.rasmusantons \
            -DartifactId=cubiomes-java \
            -Dversion=0.0.6 \
            -Dpackaging=jar

      # 3. Build backend (opcional, para cachear en runner)
      - name: Build backend
        run: mvn -B -DskipTests clean package -f tfg/pom.xml

      # 4. Build frontend
      - name: Build frontend
        run: |
          cd tfg_web
          npm ci
          npm run build

      # 5. Configurar clave SSH
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # 6. (Opcional) Test SSH connectivity
      - name: Test SSH connectivity
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} "echo SSH OK"

      # 7. Deploy en remoto usando git pull
      - name: Deploy on EC2 via SSH
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            set -e

            # 7.1. Accede al directorio de tu proyecto
            cd ~/tfg/TFG-Myke

            # 7.2. Actualiza código desde Git
            git pull origin main

            # 7.3. Reconstruye el JAR del backend y genera el build del front
            mvn -B -DskipTests clean package -f tfg/pom.xml
            cd tfg_web && npm ci && npm run build
            cd ..

            # 7.4. Levanta contenedores Docker
            docker compose down
            docker compose up -d --build
          EOF
